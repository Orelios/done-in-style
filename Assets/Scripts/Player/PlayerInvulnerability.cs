using System.Collections;
using UnityEngine;

public class PlayerInvulnerability : MonoBehaviour
{
    [SerializeField] private float hurtStateDuration;
    [SerializeField] private float invulnerabilityDuration;
    [SerializeField] private float knockBackStrength; 
    
    private bool _isHit; 
    public bool IsHit => _isHit;
    private bool _isInvulnerable;
    public bool IsInvulnerable => _isInvulnerable;

    private Player _player;

    private Color originalColor = Color.white;
    private Color flickerColor;

    [SerializeField] private float _flickerDuration = 0.1f;
    private bool _isFlickering = false;
    private Coroutine flickerCor, damagePlayerCor;
    //private SpriteRenderer _spriteRenderer;

    private void Start()
    {
        _isHit = false;
        _isInvulnerable = false;
        _player = GetComponent<Player>();

        //_spriteRenderer = GetComponent<SpriteRenderer>();
        //originalColor = new Color(_player.Sprite.color.r, _player.Sprite.color.g, _player.Sprite.color.b, 0.5f);
        //originalColor = transform.parent.GetChild(0).GetComponent<SpriteRenderer>().color;
        //flickerColor = new Color(_player.Sprite.color.r, _player.Sprite.color.g, _player.Sprite.color.b, 0.5f);

        //originalColor = _player.Sprite.color; //won't work on private void Awake()
        originalColor = Color.white;
        flickerColor = originalColor * 0.5f; // Half gamma color
    }

    public void DamagePlayer()
    {
        damagePlayerCor = StartCoroutine(DamagePlayerRoutine());
    }

    private IEnumerator DamagePlayerRoutine()
    {
        _isHit = true;
        _isInvulnerable = true;
        _player.Health.DecreaseHealth();
        KnockBack();
        //_player.Sprite.color = new Color(_player.Sprite.color.r, _player.Sprite.color.g, _player.Sprite.color.b, 0.5f);
        StartFlickering();


        yield return new WaitForSeconds(hurtStateDuration); 
        
        _isHit = false;
        
        yield return new WaitForSeconds(invulnerabilityDuration);
        
        _isInvulnerable = false;
        //_player.Sprite.color = new Color(_player.Sprite.color.r, _player.Sprite.color.g, _player.Sprite.color.b, 1f);
        StopFlickering();
    }

    private void KnockBack()
    {
        _player.Rigidbody.linearVelocity =
            new Vector2(transform.rotation.y == 0 ? 1 - knockBackStrength : -1 * -knockBackStrength, knockBackStrength);
        //Debug.Log(collision.gameObject.GetComponent<Rigidbody2D>().linearVelocity);
    }

    public void StartFlickering()
    {
        if (!_isFlickering)
        {
            _isFlickering = true;
            flickerCor = StartCoroutine(FlickerCoroutine());
        }
    }

    public void StopFlickering()
    {
        _isFlickering = false;
        //_spriteRenderer.color = originalColor; // Reset to original color
        //_player.Sprite.color = new Color(_player.Sprite.color.r, _player.Sprite.color.g, _player.Sprite.color.b, 1f);
        StopCoroutine(flickerCor);
        flickerCor = null;
        _player.Sprite.color = originalColor;
    }

    private IEnumerator FlickerCoroutine()
    {
        while (_isFlickering)
        {
            _player.Sprite.color = _player.Sprite.color == originalColor ? flickerColor : originalColor;
            yield return new WaitForSeconds(_flickerDuration);
        }
    }
}
